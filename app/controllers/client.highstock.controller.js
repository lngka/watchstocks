"use strict";
/*
* define functions to work with Highcharts library
* Highcharts is an Object defined by highstock.js
*/
var HighstockController = {};

/*
* init the chart and store its preference object in HighstockController
* chart is rendered by Highcharts.stockChart()
* @param {string} id of the div to draw the chart on, without "#"
* @return {object} the chart object generated by Highcharts
*/
HighstockController.init = function(id) {
    // eslint-disable-next-line no-undef
    var myChart = Highcharts.stockChart({
        "chart": {
            "type": "line",
            "renderTo": id,
            "events": {
                "addSeries": onAddSeries // add also a legend-item
            }
        },
        "title": {
            "text": "Stock Prices"
        },
        "subtitle": {
            "text": "Invest only what you can lose"
        },
        "series": []
    });
    HighstockController.myChart = myChart;

    return myChart;
};

// @param {object} event generated by Highcharts
function onAddSeries(event) {
    var symbol = event.options.name;
    HighstockController.addLegendItem(symbol, function(err) {
        if (err) return alert(err.message);
    });
}

/*
* add a series to the chart
* @param {object} input : {"symbol": symbol, "data": [{}]}
*      input.data is an array of objects with keys: x, open, high, low, close, y
*      x is a timestamp, y is the average between open and close
* @param {function} callback with;
*   @callback-arg {Error} err if something is wrong
*/
HighstockController.addToSeries = function(input, callback) {
    // sanity checks
    if (!HighstockController.myChart) {
        var err1 = new Error("Couldn't add series if chart not initialized");
        return callback(err1);
    }
    if (!input.symbol || !input.data) {
        var err2 = new Error("Couldn't add series if wrong data input");
        return callback(err2);
    }

    if (isAlreadyThere(input.symbol)) {
        var err3 = new Error("This symbol is already there");
        return callback(err3);
    }

    // NOTE: not used anymore,  left for documentation purpose
    // /* figure out which index the being-added series is,
    // *  by counting how many series already there
    // *  NOTE: Highcharts adds a series named "Navigator" by default
    // *  when series has AT LEAST one element
    // *  So the count must be reduced by 1, if needed, to get what we want
    // */
    // // btw, the index of each series determines its color
    // var whichseries = HighstockController.myChart.series.length;
    // var colorIndex = whichseries;
    // if (whichseries >= 2) {
    //     colorIndex = whichseries - 1;
    // }
    // var color = HighstockController.myColors[colorIndex];

    // build new series
    var series = {
        "id": input.symbol,// https://api.highcharts.com/class-reference/Highcharts.Chart#get
        "name": input.symbol,
        "data": input.data,
        "color": whichColor()
    };

    //https://api.highcharts.com/class-reference/Highcharts.Chart.html#addSeries
    HighstockController.myChart.addSeries(series, true, true);
    return callback(null);
};
// true if symbol is already displayed, return false if not
function isAlreadyThere(symbol) {
    var series = HighstockController.myChart.get(symbol);
    if (!series) {
        return false;
    } else {
        return true;
    }
}

/*
* get symbol color from chart and render a legend-item under #legends
* @param {string} symbol of the stock being added
* @param {function} callback with;
*   @callback-arg {Error} err if something is wrong
*/
HighstockController.addLegendItem = function(symbol, callback) {

    // sanity check
    if (!symbol) {
        var err = new Error("Could not add legend-item: Missing symbol");
        return callback(err);
    } else {
        var legends       = document.querySelector("#legends");
        var sample        = document.querySelector("#sample-legend-item");
        var newLegendItem = sample.cloneNode(true);
        newLegendItem.id  = "";
        var deleteBtn     = newLegendItem.querySelector(".delete-btn");


        // side effect: deleteBtn removed from newLegendItem
        newLegendItem.innerText = symbol;

        // the attribute "name" determines which symbol is being removed
        deleteBtn.name = symbol;

        // side effect: deleteBtn added back to newLegendItem
        initLegendDeleteButton(legends, newLegendItem, deleteBtn);

        styleLegendItem(newLegendItem);

        legends.appendChild(newLegendItem);
    }
};

/*
* find the color Highcharts assigned to this particular stock
* then style the representing legend-item accordingly
* @param {DOM Object} legend : the div represent a legend item
*/
function styleLegendItem (legend){

    var color = whichColor();
    legend.style["border-left"] = "thick outset " + color;
}

/*
* all .legend-item have a predefined delete-btn, here we bring
* the button to life
* @param {DOM Object} legends : the div contains all legend items
* @param {DOM Object} legend : the div represent a legend item
* @param {DOM Object} button: the button which should remove the legend on click
*/
function initLegendDeleteButton (legends, legend, button) {
    var symbol = button.name;

    button.addEventListener("click", function(event) {
        event.preventDefault();

        HighstockController.removeFromSeries(symbol, function(err) {
            if(err) {
                return alert("HighstockController " + err.message);
            } else {
                legends.removeChild(legend);
            }
        });
    });

    // because button was removed to add textual content to legend
    // see HighstockController.addLegendItem
    legend.appendChild(button);
}

/*
* remove a series from the chart
* @param {string} id of the series to be removed
*   id is set in HighstockController.addToSeries
*   id is the stock symbol
* @param {function} callback
*   @callback-arg {Error} err if something wrong happens
*/
HighstockController.removeFromSeries = function(id, callback) {
    // sanity check
    if (!id) {
        var err1 = new Error("Could not remove series: Missing series' ID");
        return callback(err1);
    }

    var series = HighstockController.myChart.get(id);
    if (!series) {
        var err2 = new Error("Could not remove series: Not found by given ID");
        return callback(err2);
    } else {
        series.remove();
        return callback(false);
    }
};

/*
* define the next color for styling legend-item and series on chart
* @return {string} color hex code
*/
function whichColor() {
    // sanity checks
    if (!HighstockController.myChart) {
        var err = new Error("Couldn't add series if chart not initialized");
        return console.error(err);
    }

    const pallet =  [
        "#2f7ed8", "#0d233a", "#8bbc21", "#910000",
        "#1aadce", "#492970", "#f28f43", "#77a1e5",
        "#c42525", "#a6c96a"
    ];

    /*
    * count the total number of current legend-item(s)
    * minus 1 for the predefined and hidden sample-legend-item
    * to determine which color to use
    * NOTE: shouldn't count series cuz Highcharts add 1 series
    * named "Navigator" to the actual number of series
    */
    var count = document.querySelector("#legends").childElementCount - 1;


    // if used all colors, start from the first one again
    return pallet[count%pallet.length];
}
